{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./assets/js/blocks.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__","wp","i18n","blocks","registerBlockType","MediaUpload","Editable","Button","components","title","description","category","icon","attributes","imgURL","type","source","attribute","selector","imgID","imgAlt","edit","props","_props$attributes","className","setAttributes","isSelected","element","createElement","class","src","alt","onClick","icons","remove","onSelect","img","id","url","render","_ref","open","upload","save","_props$attributes2"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAjB,GACAY,OAAAC,eAAAb,EAAA,cAAiDkB,OAAA,KAIjDpB,EAAAqB,EAAA,SAAAlB,GACA,IAAAS,EAAAT,KAAAmB,WACA,WAA2B,OAAAnB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDxB,EAAA2B,EAAA,GAIA3B,IAAA4B,EAAA,uFCqDQC,EAAOC,GAAGC,KAAVF,KAKJC,GAAGE,OAHHC,sBAEAC,KADAC,WACAD,aAGAE,EACAN,GAAGO,WADHD,iBAMWH,EACX,sBAEIK,MAAOT,EAAI,WACjBU,YAAaV,EAAI,mEACXW,SAAU,SACVC,KAAM,aACNC,YACIC,QACIC,KAAM,SACNC,OAAQ,YACRC,UAAW,MACXC,SAAU,OAEdC,OACIJ,KAAM,UAEVK,QACIL,KAAM,SACNC,OAAQ,YACRC,UAAW,MACXC,SAAU,QAGlBG,KAAM,SAAAC,GAAS,IAAAC,EAEkCD,EADrCT,WAAcM,EADXI,EACWJ,MAAOL,EADlBS,EACkBT,OAAQM,EAD1BG,EAC0BH,OACjCI,EAAyCF,EAAzCE,UAAWC,EAA8BH,EAA9BG,cAAeC,EAAeJ,EAAfI,WAe9B,OACIzB,GAAA0B,QAAAC,cAAA,OAAKJ,UAAYA,GAETL,EAoBAlB,GAAA0B,QAAAC,cAAA,KAAGC,MAAM,iBACL5B,GAAA0B,QAAAC,cAAA,OACIE,IAAMhB,EACNiB,IAAMX,IAGRM,EAEEzB,GAAA0B,QAAAC,cAACrB,GACGiB,UAAU,eACVQ,QAxCF,WAClBP,GACIN,MAAO,KACPL,OAAQ,KACRM,OAAQ,SAsCUa,MAAMC,QAGZ,MAjCRjC,GAAA0B,QAAAC,cAACvB,GACG8B,SApBM,SAAAC,GAClBX,GACIN,MAAOiB,EAAIC,GACXvB,OAAQsB,EAAIE,IACZlB,OAAQgB,EAAIL,OAiBJhB,KAAK,QACLxB,MAAQ4B,EACRoB,OAAS,SAAAC,GAAA,IAAIC,EAAJD,EAAIC,KAAJ,OACLxC,GAAA0B,QAAAC,cAACrB,GACGiB,UAAY,sBACZQ,QAAUS,GAERR,MAAMS,OACN1C,EAAI,uBA+BlC2C,KAAM,SAAArB,GAAS,IAAAsB,EACgBtB,EAAMT,WAAzBC,EADG8B,EACH9B,OAAQM,EADLwB,EACKxB,OAChB,OACInB,GAAA0B,QAAAC,cAAA,SACI3B,GAAA0B,QAAAC,cAAA,OACIE,IAAMhB,EACNiB,IAAMX","file":"block.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// ( function( wp ) {\n// \t/**\n// \t * Registers a new block provided a unique name and an object defining its behavior.\n// \t * @see https://github.com/WordPress/gutenberg/tree/master/blocks#api\n// \t */\n// \tvar registerBlockType = wp.blocks.registerBlockType;\n// \t/**\n// \t * Returns a new element of given type. Element is an abstraction layer atop React.\n// \t * @see https://github.com/WordPress/gutenberg/tree/master/element#element\n// \t */\n// \tvar el = wp.element.createElement;\n// \t/**\n// \t * Retrieves the translation of text.\n// \t * @see https://github.com/WordPress/gutenberg/tree/master/i18n#api\n// \t */\n// \tvar __ = wp.i18n.__;\n\n// \tvar MediaUploadButton = wp.blocks.MediaUploadButton;\n\n// \t/**\n// \t * Every block starts by registering a new block type definition.\n// \t * @see https://wordpress.org/gutenberg/handbook/block-api/\n// \t */\n// \tregisterBlockType( 'podcasting/podcast', {\n// \t\t/**\n// \t\t * This is the display title for your block, which can be translated with `i18n` functions.\n// \t\t * The block inserter will show this name.\n// \t\t */\n// \t\ttitle: __( 'Podcast' ),\n\n// \t\tdescription: __( 'Insert a podcast episode into a post and add to a podcast feed.' ),\n\n// \t\t/**\n// \t\t * Blocks are grouped into categories to help users browse and discover them.\n// \t\t * The categories provided by core are `common`, `embed`, `formatting`, `layout` and `widgets`.\n// \t\t */\n// \t\tcategory: 'common',\n\n// \t\ticon: 'microphone',\n\n// \t\t/**\n// \t\t * Optional block extended support features.\n// \t\t */\n// \t\tsupports: {\n// \t\t\t// Removes support for an HTML mode.\n// \t\t\thtml: false,\n// \t\t},\n\n// \t\tattributes: {\n// \t\t\tsrc: {\n// \t\t\t\ttype: 'string',\n// \t\t\t\tsource: 'attribute',\n// \t\t\t\tselector: 'audio',\n// \t\t\t\tattribute: 'src',\n// \t\t\t},\n// \t\t\talign: {\n// \t\t\t\ttype: 'string',\n// \t\t\t},\n// \t\t\tcaption: {\n// \t\t\t\ttype: 'array',\n// \t\t\t\tsource: 'children',\n// \t\t\t\tselector: 'figcaption',\n// \t\t\t},\n// \t\t\tid: {\n// \t\t\t\ttype: 'number',\n// \t\t\t},\n// \t\t},\n\n// \t\t/**\n// \t\t * The edit function describes the structure of your block in the context of the editor.\n// \t\t * This represents what the editor will render when the block is used.\n// \t\t * @see https://wordpress.org/gutenberg/handbook/block-edit-save/#edit\n// \t\t *\n// \t\t * @param {Object} [props] Properties passed from the editor.\n// \t\t * @return {Element}       Element to render.\n// \t\t */\n// \t\tedit: function( props ) {\n// \t\t\treturn el(\n// \t\t\t\t'div',\n// \t\t\t\t{ className: props.className },\n// \t\t\t\tel( blocks.MediaUploadButton, {\n// \t\t\t\t\tbuttonProps: {\n// \t\t\t\t\t\tclassName: attributes.mediaID\n// \t\t\t\t\t\t\t? 'image-button'\n// \t\t\t\t\t\t\t: 'components-button button button-large',\n// \t\t\t\t\t},\n// \t\t\t\t\tonSelect: onSelectImage,\n// \t\t\t\t\ttype: 'image',\n// \t\t\t\t\tvalue: attributes.mediaID,\n// \t\t\t\t},\n// \t\t\t\tattributes.mediaID\n// \t\t\t\t\t? el( 'img', { src: attributes.mediaURL } )\n// \t\t\t\t\t: 'Upload Image'\n// \t\t\t\t),\n// \t\t\t);\n// \t\t},\n\n// \t\t/**\n// \t\t * The save function defines the way in which the different attributes should be combined\n// \t\t * into the final markup, which is then serialized by Gutenberg into `post_content`.\n// \t\t * @see https://wordpress.org/gutenberg/handbook/block-edit-save/#save\n// \t\t *\n// \t\t * @return {Element}       Element to render.\n// \t\t */\n// \t\tsave: function() {\n// \t\t\treturn el(\n// \t\t\t\t'p',\n// \t\t\t\t{},\n// \t\t\t\t__( 'Hello from the saved content!' )\n// \t\t\t);\n// \t\t}\n// \t} );\n// } )(\n// \twindow.wp\n// );\n\n\n/**\n * Internal block libraries\n */\nconst { __ } = wp.i18n;\nconst {\n    registerBlockType,\n    Editable,\n    MediaUpload,\n} = wp.blocks;\nconst {\n    Button,\n} = wp.components;\n\n/**\n * Register example block\n */\nexport default registerBlockType(\n    'podcasting/podcast',\n    {\n        title: __( 'Podcast' ),\n\t\tdescription: __( 'Insert a podcast episode into a post and add to a podcast feed.' ),\n        category: 'common',\n        icon: 'microphone',\n        attributes: {\n            imgURL: {\n                type: 'string',\n                source: 'attribute',\n                attribute: 'src',\n                selector: 'img',\n            },\n            imgID: {\n                type: 'number',\n            },\n            imgAlt: {\n                type: 'string',\n                source: 'attribute',\n                attribute: 'alt',\n                selector: 'img',\n            }\n        },\n        edit: props => {\n            const { attributes: { imgID, imgURL, imgAlt },\n                className, setAttributes, isSelected } = props;\n            const onSelectImage = img => {\n                setAttributes( {\n                    imgID: img.id,\n                    imgURL: img.url,\n                    imgAlt: img.alt,\n                } );\n            };\n            const onRemoveImage = () => {\n                setAttributes({\n                    imgID: null,\n                    imgURL: null,\n                    imgAlt: null,\n                });\n            }\n            return (\n                <div className={ className }>\n\n                    { ! imgID ? (\n\n                        <MediaUpload\n                            onSelect={ onSelectImage }\n                            type=\"image\"\n                            value={ imgID }\n                            render={ ( { open } ) => (\n                                <Button\n                                    className={ \"button button-large\" }\n                                    onClick={ open }\n                                >\n                                    { icons.upload }\n                                    { __( ' Upload Image' ) }\n                                </Button>\n                            ) }\n                        >\n                        </MediaUpload>\n\n                    ) : (\n\n                        <p class=\"image-wrapper\">\n                            <img\n                                src={ imgURL }\n                                alt={ imgAlt }\n                            />\n\n                            { isSelected ? (\n\n                                <Button\n                                    className=\"remove-image\"\n                                    onClick={ onRemoveImage }\n                                >\n                                    { icons.remove }\n                                </Button>\n\n                            ) : null }\n\n                        </p>\n                    )}\n\n                </div>\n            );\n        },\n        save: props => {\n            const { imgURL, imgAlt } = props.attributes;\n            return (\n                <p>\n                    <img\n                        src={ imgURL }\n                        alt={ imgAlt }\n                    />\n                </p>\n            );\n        },\n    },\n);\n"],"sourceRoot":""}